When would you want to create a remote repository rather than keeping all your work local?

I'd use romote option while working in team on a large coding project. Also it'll help a lot when traveling or using several PC's for the commit changes.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

In case I want to compare oparational abilities of two codes I'd use such a sttategy for having a real-time-experience. It's great to have extra control under as much tools as we can have.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Fork is the GitHub's special system for manipulating copies of the code, only available within the GH software - I'd use it while working inside GH community or with its desktop app. Clone is exactly what it is literally, making coppies of the code from one source to another even from GH to PC and vice versa - I'll use it for copy-making when I wan to have a physical copy of the code on my hardware. Branches are individual versions of commits that are present within the code-editing history and they're similar to expansion-mods for today's games - great option for creating versions and add-ons for our modification purposes in the code.

What is the benefit of having a copy of the last known state of the remote
stored locally?

The benefits are being up-to-date with coding steps and keeping files synchronized for better understanding of the team afforts and progress.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

I'd collaborate via phone or social networks and even face-to-face if the developing group is local. GitHub is making it easier for us to synchronize the data and keep our codes up-to-date, it'd be much hareder to get the job done with an international team withour such tools indeed.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

When I'm not 100% positive with my versio-control I'll create commit to a branch or even when I'm developing an edition for the master code. Committing to the master branch is a major step that has to be crystal clear of mistakes, but with versions we'll hve an extra chance to go over the additions.